"""Django settings for the ionia project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/

This settings.py uses django-configurations to define different
values for different environments, see
https://github.com/jazzband/django-configurations
"""

import os

import django_heroku
import sentry_sdk
from configurations import Configuration, pristinemethod
from sentry_sdk.integrations.django import DjangoIntegration

from .cache import Cache


class Base(Configuration):
    """Settings common to all environments"""

    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [os.path.join(BASE_DIR, "templates")],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "context_processors.context_processors.template_links",
                    "context_processors.context_processors.common_contexts",
                ]
            },
        }
    ]

    WSGI_APPLICATION = "ionia.wsgi.application"

    AUTHENTICATION_BACKENDS = [
        "axes.backends.AxesModelBackend",
        "django.contrib.auth.backends.ModelBackend",
    ]

    # Application definition

    INSTALLED_APPS = [
        "post.apps.PostConfig",
        "island.apps.IslandConfig",
        "user.apps.UserConfig",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.humanize",
        "avatar",
        "widget_tweaks",
        "axes",
    ]

    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ]

    # Password validation, just use the min length validator
    # https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
            "OPTIONS": {"min_length": 10},
        }
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/2.1/topics/i18n/

    LANGUAGE_CODE = "en-us"

    TIME_ZONE = "UTC"

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    # django-avatar
    # https://github.com/grantmcconnaughey/django-avatar

    AVATAR_GRAVATAR_DEFAULT = "identicon"

    AVATAR_GRAVATAR_FIELD = "username"

    AVATAR_MAX_AVATARS_PER_USER = 1

    AVATAR_THUMB_FORMAT = "PNG"

    AVATAR_HASH_FILENAMES = True

    AVATAR_ADD_TEMPLATE = "avatar/change.html"

    AVATAR_CLEANUP_DELETED = True

    # Authentication

    AUTH_USER_MODEL = "user.User"

    LOGIN_URL = "/users/login/"

    LOGIN_REDIRECT_URL = "/"

    LOGOUT_REDIRECT_URL = "/"

    # django-axes, adds rate limiting to login
    # https://github.com/jazzband/django-axes

    AXES_DISABLE_SUCCESS_ACCESS_LOG = True

    AXES_VERBOSE = False

    STATIC_URL = "/static/"

    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

    # Project custom settings

    DEFAULT_ISLAND = "ionia.fyi"

    MAX_POSTS_PAGE = 250


class Dev(Base):
    """Development only settings"""

    BASE_DIR = Base.BASE_DIR

    # Dev urls

    ROOT_URLCONF = "ionia.urls-dev"

    DEBUG = True

    ALLOWED_HOSTS = []

    SECRET_KEY = "dev"

    # Caches

    CACHES = {
        "default": {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"},
        "axes_cache": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"},
    }

    AXES_CACHE = "axes_cache"

    # Databases
    # https://docs.djangoproject.com/en/2.1/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

    # Application, add django-livereload-server and admin in dev
    # https://github.com/tjwalch/django-livereload-server

    INSTALLED_APPS = Base.INSTALLED_APPS + (["livereload", "django.contrib.admin"])

    MIDDLEWARE = Base.MIDDLEWARE + (["livereload.middleware.LiveReloadScript"])

    # Email

    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.1/howto/static-files/

    MEDIA_URL = "/media/"

    STATIC_ROOT = "/staticfiles/"

    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"


class Prod(Base):
    """Production only settings"""

    BASE_DIR = Base.BASE_DIR

    # Prod urls

    ROOT_URLCONF = "ionia.urls"

    SECURE_SSL_REDIRECT = True

    DEBUG = False

    # Add django-cachalot
    # https://github.com/noripyt/django-cachalot

    INSTALLED_APPS = Base.INSTALLED_APPS + (["cachalot"])

    MIDDLEWARE = Base.MIDDLEWARE

    # Caches, memcache for default, redis for sessions

    CACHES = Cache.get_cache()

    SESSION_ENGINE = "django.contrib.sessions.backends.cache"

    # Use redis for sessions
    SESSION_CACHE_ALIAS = "redis"

    # Email

    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

    DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")

    EMAIL_HOST = os.environ.get("EMAIL_HOST")

    EMAIL_PORT = 587

    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")

    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

    EMAIL_USE_TLS = True

    # Aws
    # Only used for avatars at the moment

    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")

    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")

    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")

    AWS_DEFAULT_ACL = None

    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=31536000"}

    S3_URL = "http://%s.s3.amazonaws.com/" % AWS_STORAGE_BUCKET_NAME

    MEDIA_URL = S3_URL

    # Heroku provided config - Databases/Static Files/Logging/Secret Key
    # https://docs.djangoproject.com/en/2.1/ref/settings/#databases

    django_heroku.settings(locals(), test_runner=False)

    @classmethod
    def post_setup(cls):
        """Sentry debugging config
        Putting sentry in here ensures it only gets activated in Prod

        https://django-configurations.readthedocs.io/en/stable/patterns/
        """
        super(Prod, cls).post_setup()
        sentry_sdk.init(
            dsn=os.environ.get("SENTRY_DSN"), integrations=[DjangoIntegration()]
        )
